/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CreateProjectRequest } from '../models/CreateProjectRequest';
import type { GenericResponse } from '../models/GenericResponse';
import type { ProjectListResponse } from '../models/ProjectListResponse';
import type { ProjectResponse } from '../models/ProjectResponse';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ProjectsService {

  /**
   * Retrieves all projects
   * @returns ProjectListResponse OK
   * @throws ApiError
   */
  public static get(): CancelablePromise<ProjectListResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/project',
      errors: {
        400: `Bad Request`,
        404: `Not Found`,
        405: `Method Not Allowed`,
        500: `Internal Server Error`,
      },
    });
  }

  /**
   * Creates a new project
   * @param requestBody 
   * @returns GenericResponse Created
   * @throws ApiError
   */
  public static createProject(
requestBody: CreateProjectRequest,
): CancelablePromise<GenericResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/project',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `Bad Request`,
        404: `Not Found`,
        405: `Method Not Allowed`,
        500: `Internal Server Error`,
      },
    });
  }

  /**
   * Deletes all projects
   * @param confirm 
   * @returns GenericResponse OK
   * @throws ApiError
   */
  public static deleteAll(
confirm: boolean,
): CancelablePromise<GenericResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/v1/project',
      query: {
        'confirm': confirm,
      },
      errors: {
        400: `Bad Request`,
        404: `Not Found`,
        405: `Method Not Allowed`,
        500: `Internal Server Error`,
      },
    });
  }

  /**
   * Create a project from a material list generated by Litematica
   * @param projectName 
   * @param formData 
   * @returns GenericResponse Created
   * @throws ApiError
   */
  public static createFromMaterialList(
projectName?: string,
formData?: {
file: Blob;
},
): CancelablePromise<GenericResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/v1/project/schematic/text',
      query: {
        'projectName': projectName,
      },
      formData: formData,
      mediaType: 'multipart/form-data',
      errors: {
        400: `Bad Request`,
        404: `Not Found`,
        405: `Method Not Allowed`,
        500: `Internal Server Error`,
      },
    });
  }

  /**
   * Undoes an archive operation on a project
   * @param id 
   * @returns GenericResponse OK
   * @throws ApiError
   */
  public static unarchiveProject(
id: string,
): CancelablePromise<GenericResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/api/v1/project/{id}/unarchive',
      path: {
        'id': id,
      },
      errors: {
        400: `Bad Request`,
        404: `Not Found`,
        405: `Method Not Allowed`,
        500: `Internal Server Error`,
      },
    });
  }

  /**
   * Archives a project
   * @param id 
   * @returns GenericResponse OK
   * @throws ApiError
   */
  public static archiveProject(
id: string,
): CancelablePromise<GenericResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/api/v1/project/{id}/archive',
      path: {
        'id': id,
      },
      errors: {
        400: `Bad Request`,
        404: `Not Found`,
        405: `Method Not Allowed`,
        500: `Internal Server Error`,
      },
    });
  }

  /**
   * Retrieves a single project by its ID
   * @param id 
   * @returns ProjectResponse OK
   * @throws ApiError
   */
  public static getProject(
id: string,
): CancelablePromise<ProjectResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/project/{id}',
      path: {
        'id': id,
      },
      errors: {
        400: `Bad Request`,
        404: `Not Found`,
        405: `Method Not Allowed`,
        500: `Internal Server Error`,
      },
    });
  }

  /**
   * Check if project is archived
   * @param id 
   * @returns boolean OK
   * @throws ApiError
   */
  public static isArchived(
id: string,
): CancelablePromise<boolean> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/project/{id}/archived',
      path: {
        'id': id,
      },
      errors: {
        400: `Bad Request`,
        404: `Not Found`,
        405: `Method Not Allowed`,
        500: `Internal Server Error`,
      },
    });
  }

}
