package app.mcorg.project.presentation.rest.project;

import app.mcorg.project.presentation.rest.entities.GenericResponse;
import app.mcorg.project.presentation.rest.entities.project.CreateProjectRequest;
import app.mcorg.project.presentation.rest.entities.project.ProjectListResponse;
import app.mcorg.project.presentation.rest.entities.project.ProjectResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.concurrent.CompletableFuture;

@Tag(name = "Projects")
@SuppressWarnings("unused")
public interface ProjectDocumentation {
    @Operation(summary = "Retrieves all projects")
    CompletableFuture<ResponseEntity<ProjectListResponse>> get();


    @Operation(summary = "Delete single project")
    CompletableFuture<ResponseEntity<GenericResponse>> delete(String id);

    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "Deletes all projects")
    CompletableFuture<ResponseEntity<GenericResponse>> deleteAll(Boolean confirm);

    @Operation(summary = "Retrieves a single project by its ID")
    CompletableFuture<ResponseEntity<ProjectResponse>> getProject(String id);

    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "Creates a new project")
    CompletableFuture<ResponseEntity<GenericResponse>> createProject(CreateProjectRequest request);

    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "Create a project from a material list generated by Litematica")
    CompletableFuture<ResponseEntity<GenericResponse>> createFromMaterialList(String name, MultipartFile file) throws IOException;

    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "Archives a project")
    CompletableFuture<ResponseEntity<GenericResponse>> archiveProject(String id);

    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "Undoes an archive operation on a project")
    CompletableFuture<ResponseEntity<GenericResponse>> unarchiveProject(String id);

    @Operation(summary = "Check if project is archived")
    CompletableFuture<ResponseEntity<Boolean>> isArchived(String id);
}
